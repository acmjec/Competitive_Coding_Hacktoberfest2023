Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:
Input: s = "()"
Output: true

Example 2:
Input: s = "()[]{}"
Output: true

Example 3:
Input: s = "(]"
Output: false
 
Constraints:
1 <= s.length <= 104
s consists of parentheses only '()[]{}'

SOLUTION :

    Language - C++

  bool isValid(string s) {
    stack<char> st;
    int i=0;
    while(i<s.length())
    { char ch=s[i];
      if(st.empty() && (ch==')' || ch=='}' || ch==']')) {
          return false;
      }
      else if(ch=='(' || ch=='{' || ch=='['){
         st.push(ch);
      }
      else if(ch==')' && st.top()=='('){
         st.pop();
      }
      else if(ch=='}' && st.top()=='{'){
          st.pop();
      }
      else if(ch==']' && st.top()=='['){
          st.pop();
      }
      else{
          return false;
      }
      i++;
    }

    if(st.empty()){
        return true;
    }
    return false;
    }
