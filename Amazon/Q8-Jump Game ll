You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1]. 

Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:
Input: nums = [2,3,0,1,4]
Output: 2
 
Constraints:
1 <= nums.length <= 104
0 <= nums[i] <= 1000
It's guaranteed that you can reach nums[n - 1].

SOLUTION:

Language - C++

#include <bits/stdc++.h>
using namespace std;

int rec(vector<int> &nums, int i, vector<int> &dp)
{
    if (i == 0)
        return 0;
    if (dp[i] != -1)
        return dp[i];
    int ans = INT_MAX;
    for (int j = 0; j < i; j++)
    {
        if ((j + nums[j]) >= i)
        {
            ans = min(ans, 1 + rec(nums, j, dp));
        }
    }
    return dp[i] = ans;
}
int minJump(vector<int> nums)
{
    int n = nums.size();
    vector<int> dp(n, -1);
    return rec(nums, n - 1, dp);
}
int main()
{

    vector<int> nums;
    int n;
    cin >> n;
    for (int i = 0; i < n; i++)
    {
        int x;
        cin >> x;
        nums.push_back(x);
    }

    cout << minJump(nums) << endl;
    ;
    return 0;
}

